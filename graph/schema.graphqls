scalar UUID

type User { 
  id: UUID!
  password: String!
  email: String!
  profile: Profile!
}

type Profile {
  id: UUID!
  username: String!
  phone: String!
  name: String!
  profilePic: String!
  complete: Boolean!
}

input NewUsrInput {
  email: String!
  password: String!
}

input ProfileStarterInput {
  username: String!
  name: String!
  phone: String!
  uid: String!
}

type Subscription {
  adminsNotified: String
}

type AuthResult {
  token: String!
  status: Boolean!
}

type Query{
  allUsrs: [User!]!
  secureInfo: String!
  userData(id: String!): User!
}
type ProfileUpdateResult {
  message: String!
  stat: Boolean!
}
type Mutation {
  # this is a test schema
  removeAllUsrs: Boolean!
  newUsr(input: NewUsrInput!): String!
  emailAuthLogin(email: String!, password: String!): AuthResult!
  updateProfileStarter(uid: ProfileStarterInput!): ProfileUpdateResult!
}

directive @user(username: String!) on SUBSCRIPTION
