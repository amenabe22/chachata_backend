scalar UUID
scalar Time

type Notifications {
    id: ID!
    type: String!
    text: String!

}

type Message {
    id: ID!
    text: String!
    createdBy: String!
    createdAt: Time!
}
type Chatroom {
    id: ID!
    name: String!
    messages: [Message!]!
}

type InstatntMessage {
    id: ID!
    name: String!
    message: Message!
}

type Devices {
  id: UUID!
  appId: String!
  DeviceName: String!
}

type User { 
  id: UUID!
  password: String!
  email: String!
  profile: Profile!
  isVerified: Boolean!
  userDevices: [Devices!]!
  qrcode: String!
}

type Profile {
  id: UUID!
  username: String!
  phone: String!
  name: String!
  profilePic: String!
  complete: Boolean!
}

input NewUsrInput {
  email: String!
  password: String!
  deviceInput: DeviceDataInput!
}

input ProfileStarterInput {
  username: String!
  name: String!
  phone: String!
}

input DeviceDataInput {
  appId: String!
  deviceName: String!
}

type Subscription {
  usersNotified: Notifications
  messageAdded(roomName: String!, username: String!): Message!
  # debug this later
  # usersNotification: String!
  roomNotification: Notifications!
  newRoomAdded: Chatroom!
}

type AuthResult {
  token: String!
  status: Boolean!
}

type Query{
  allUsrs: [User!]!
  secureInfo: String!
  userData: User!
  room(name:String!): Chatroom
  allRoomsList: [Chatroom!]!
  allRooms: [InstatntMessage!]!
  allMessages: [Chatroom!]!
  singleRoomMessages(room: String!): [Message!]!
}
type ProfileUpdateResult {
  message: String!
  stat: Boolean!
}
type Mutation {
  # this is a test schema
  removeAllUsrs: Boolean!
  newUsr(input: NewUsrInput!): String!
  emailAuthLogin(email: String!, password: String!): AuthResult!
  updateProfileStarter(input: ProfileStarterInput!): ProfileUpdateResult!
  forgotPassword: Boolean!
  # chatroom schemas
  post(text: String!, username: String!, roomName: String!): Message!
  popAllChats: Boolean!
  newRoom(roomName: String!): Chatroom!
}

directive @user(username: String!) on SUBSCRIPTION
